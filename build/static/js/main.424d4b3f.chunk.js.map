{"version":3,"sources":["utils/generatePathPoster.js","utils/getRandomNumber.js","components/Movie.js","components/Actor.js","utils/callsAPI.js","App.js","reportWebVitals.js","index.js"],"names":["generatePathPoster","name","size","getRandomNumber","max","Math","floor","random","Movie","title","poster","className","src","alt","Actor","style","textAlign","API_KEY","DOMAIN","LANG","getMovies","a","fetch","req","json","res","results","console","log","getActorByIdMovie","movie_id","randomNumber","cast","length","App","useState","movies","setMovies","actor","setActor","startGame","setStartGame","endGame","setEndGame","timer","setTimer","currentMovie","setCurrentMovie","winningAnswer","setWinningAnswer","useEffect","randomResponse","id","setInterval","clearInterval","verifyActor","response","paddingTop","Container","maxWidth","Box","sx","display","gridTemplateColumns","undefined","poster_path","profile_path","Button","variant","onClick","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.424d4b3f.chunk.js","sourcesContent":["export default function generatePathPoster(name, size = 'w500') {\n  return name === null ? 'https://via.placeholder.com/300x450' : `https://image.tmdb.org/t/p/${size}${name}`;\n}","export default function getRandomNumber(max) {\n  return Math.floor(Math.random() * max);\n}","import React from 'react';\nimport { generatePathPoster } from '../utils/utils';\n\nexport default function Movie({ title, poster }) {\n  return <div className=\"card\">\n    <img src={generatePathPoster(poster, 'w300')} alt={title} />\n    {title ? <p>{title}</p> : null}\n  </div>\n}","import { generatePathPoster } from '../utils/utils';\n\nexport default function Actor({ name, poster }) {\n  return <div style={{ textAlign: 'center' }}>\n    <img src={generatePathPoster(poster, 'w300')} alt={name} />\n    <p>{name}</p>\n  </div>\n\n}","import getRandomNumber from \"./getRandomNumber\";\n\nconst API_KEY = '7ea5f490261a949e52930517e1b4657c';\nconst DOMAIN = 'https://api.themoviedb.org/3';\nconst LANG = '&language=fr-FR';\n\nconst getMovies = async () => {\n  try {\n    const req = await fetch(`${DOMAIN}/movie/upcoming?api_key=${API_KEY}${LANG}`),\n      res = await req.json();\n    return res.results;\n  } catch(e) {\n    console.log('error : ', e);\n  }\n}\n\nconst getActorByIdMovie = async (movie_id) => {\n  try {\n    const req = await fetch(`${DOMAIN}/movie/${movie_id}/credits?api_key=${API_KEY}${LANG}`);\n    const res = await req.json();\n    const randomNumber = getRandomNumber(res.cast.length);\n    return {\n      movie_id,\n      ...res.cast[randomNumber],\n    };\n  } catch(e) {\n    console.log('error : ', e);\n  }\n}\n\nexport {\n  getMovies,\n  getActorByIdMovie\n}","import './App.css';\n// hook \nimport { useState, useEffect } from 'react';\n// components\nimport Movie from './components/Movie';\nimport Actor from './components/Actor';\n// material ui\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Button from '@mui/material/Button';\n// utils\nimport { getActorByIdMovie, getMovies } from './utils/callsAPI';\nimport getRandomNumber from './utils/getRandomNumber';\n\nexport default function App() {\n  const [movies, setMovies] = useState([]);\n  const [actor, setActor] = useState(null);\n  const [startGame, setStartGame] = useState(false);\n  const [endGame, setEndGame] = useState(false);\n  const [timer, setTimer] = useState(60);\n  const [currentMovie, setCurrentMovie] = useState(1);\n  const [winningAnswer, setWinningAnswer] = useState(0);\n  const nbrAnswer = 20;\n\n  useEffect(() => {\n    (async () => {\n      setMovies(await getMovies());\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (timer === 0 || winningAnswer === nbrAnswer) {\n      setEndGame(true);\n      setStartGame(false);\n    }\n  }, [timer, winningAnswer]);\n\n  useEffect(() => {\n    (async () => {\n      if (movies.length > 0) {\n        const randomResponse = getRandomNumber(2),\n          randomNumber = getRandomNumber(20);\n          console.log('randomResponse : ', randomResponse);\n        setActor(await getActorByIdMovie(movies[randomResponse === 0 ? randomNumber : currentMovie].id));\n      }\n    })();\n  }, [movies, currentMovie]);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (timer > 0 && startGame) {\n        setTimer(timer - 1);\n      }\n    }, 1000);\n    return () => clearInterval(id);\n  }, [startGame, timer, endGame]);\n\n  const verifyActor = (response) => {\n    let results = false;\n    if (actor.movie_id === movies[currentMovie].id) {\n      results = true;\n    }\n    if (response !== results) {\n      setEndGame(true);\n      setStartGame(false);\n    } else {\n      setWinningAnswer(winningAnswer + 1);\n      setCurrentMovie(currentMovie + 1);\n    }\n  }\n\n  const start = () => setStartGame(true);\n\n  const restartGame = () => window.location.reload();\n\n  return <div className=\"App\" style={{ paddingTop: '100px' }}>\n    {!endGame ? <h1>Cet acteur a-t-il joué dans ce film ?</h1> : null}\n    {!endGame ? <h2>{timer}</h2> : <h2>Le jeu est terminé. votre score est {winningAnswer}/{nbrAnswer}</h2>}\n    <Container maxWidth='lg'>\n      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)' }}>\n        <div>\n          {movies.length > 0 && movies[currentMovie] !== undefined ? <Movie title={movies[currentMovie].title} poster={movies[currentMovie].poster_path} key={movies[currentMovie].id} /> : <div>Loading</div>}\n        </div>\n        <div>\n          {actor ? <Actor name={actor.name} poster={actor.profile_path} /> : <div>Loading</div>}\n        </div>\n      </Box>\n      {startGame && currentMovie < nbrAnswer ? <Button variant=\"contained\" onClick={() => verifyActor(true)}>Oui</Button> : null }\n      {startGame && currentMovie < nbrAnswer ?  <Button variant=\"outlined\" onClick={() => verifyActor(false)}>Non</Button> : null }\n      {!startGame && !endGame ? <Button variant=\"contained\" onClick={() => start()}>Commencer</Button> : null}\n      {endGame ? <Button variant=\"contained\" onClick={() => restartGame()}>Recommencer</Button> : null}\n    </Container>\n  </div>;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}